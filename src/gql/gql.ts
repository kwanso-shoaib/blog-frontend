/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation createPost($title: String!, $text: String!, $image: String!, $tag: String!, $minutesToRead: String!) {\n  createPosts(\n    createPostDto: {title: $title, text: $text, image: $image, tag: $tag, minutesToRead: $minutesToRead}\n  ) {\n    response {\n      message\n      error\n      status\n    }\n    post {\n      id\n      title\n      text\n    }\n  }\n}\n\nquery myPosts($skip: Int!, $take: Int!) {\n  myPosts(paginationInput: {skip: $skip, take: $take}) {\n    total\n    items {\n      id\n      title\n      text\n      image\n      tag\n      minutesToRead\n      userId\n      createdAt\n      user {\n        name\n        email\n      }\n      comments {\n        id\n        text\n        userId\n        postsId\n        parentId\n        replyCount\n        user {\n          name\n          email\n        }\n        createdAt\n      }\n      user {\n        name\n        email\n      }\n    }\n  }\n}\n\nmutation createComment($text: String!, $postId: Float!, $parentId: Float) {\n  createComment(\n    createCommentDto: {text: $text, postId: $postId, parentId: $parentId}\n  ) {\n    id\n    text\n    userId\n    postsId\n    parentId\n    replyCount\n  }\n}\n\nquery myPosts($skip: Int!, $take: Int!) {\n  myPosts(paginationInput: {skip: $skip, take: $take}) {\n    total\n    items {\n      id\n      title\n      text\n      image\n      tag\n      minutesToRead\n      userId\n      createdAt\n      user {\n        name\n        email\n      }\n      comments {\n        id\n        text\n        userId\n        postsId\n        parentId\n        replyCount\n        user {\n          name\n          email\n        }\n        createdAt\n      }\n      user {\n        name\n        email\n      }\n    }\n  }\n}\n\nquery findPostById($id: Float!) {\n  findPostById(id: $id) {\n    response {\n      message\n      error\n      status\n    }\n    post {\n      id\n      title\n      text\n      image\n      tag\n      minutesToRead\n      userId\n      createdAt\n      user {\n        name\n        email\n      }\n      comments {\n        id\n        text\n        userId\n        postsId\n        parentId\n        replyCount\n        user {\n          name\n          email\n        }\n        createdAt\n      }\n    }\n  }\n}\n\nquery replies($commentId: Float!) {\n  replies(commentId: $commentId) {\n    id\n    text\n    userId\n    postsId\n    parentId\n    replyCount\n    user {\n      name\n      email\n    }\n    createdAt\n  }\n}\n\nquery getPosts($search: String!) {\n  getPosts(search: $search) {\n    id\n    title\n    text\n    image\n    tag\n    minutesToRead\n    userId\n    user {\n      name\n      email\n    }\n    createdAt\n  }\n}": types.CreatePostDocument,
    "mutation signUp($name: String!, $email: String!, $password: String!) {\n  signUp(\n    createUserInput: {name: $name, email: $email, password: $password, role: Admin}\n  ) {\n    name\n    email\n    password\n  }\n}\n\nmutation signIn($email: String!, $password: String!) {\n  signIn(user: {email: $email, password: $password}) {\n    accesstoken\n    response {\n      status\n      message\n    }\n  }\n}": types.SignUpDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createPost($title: String!, $text: String!, $image: String!, $tag: String!, $minutesToRead: String!) {\n  createPosts(\n    createPostDto: {title: $title, text: $text, image: $image, tag: $tag, minutesToRead: $minutesToRead}\n  ) {\n    response {\n      message\n      error\n      status\n    }\n    post {\n      id\n      title\n      text\n    }\n  }\n}\n\nquery myPosts($skip: Int!, $take: Int!) {\n  myPosts(paginationInput: {skip: $skip, take: $take}) {\n    total\n    items {\n      id\n      title\n      text\n      image\n      tag\n      minutesToRead\n      userId\n      createdAt\n      user {\n        name\n        email\n      }\n      comments {\n        id\n        text\n        userId\n        postsId\n        parentId\n        replyCount\n        user {\n          name\n          email\n        }\n        createdAt\n      }\n      user {\n        name\n        email\n      }\n    }\n  }\n}\n\nmutation createComment($text: String!, $postId: Float!, $parentId: Float) {\n  createComment(\n    createCommentDto: {text: $text, postId: $postId, parentId: $parentId}\n  ) {\n    id\n    text\n    userId\n    postsId\n    parentId\n    replyCount\n  }\n}\n\nquery myPosts($skip: Int!, $take: Int!) {\n  myPosts(paginationInput: {skip: $skip, take: $take}) {\n    total\n    items {\n      id\n      title\n      text\n      image\n      tag\n      minutesToRead\n      userId\n      createdAt\n      user {\n        name\n        email\n      }\n      comments {\n        id\n        text\n        userId\n        postsId\n        parentId\n        replyCount\n        user {\n          name\n          email\n        }\n        createdAt\n      }\n      user {\n        name\n        email\n      }\n    }\n  }\n}\n\nquery findPostById($id: Float!) {\n  findPostById(id: $id) {\n    response {\n      message\n      error\n      status\n    }\n    post {\n      id\n      title\n      text\n      image\n      tag\n      minutesToRead\n      userId\n      createdAt\n      user {\n        name\n        email\n      }\n      comments {\n        id\n        text\n        userId\n        postsId\n        parentId\n        replyCount\n        user {\n          name\n          email\n        }\n        createdAt\n      }\n    }\n  }\n}\n\nquery replies($commentId: Float!) {\n  replies(commentId: $commentId) {\n    id\n    text\n    userId\n    postsId\n    parentId\n    replyCount\n    user {\n      name\n      email\n    }\n    createdAt\n  }\n}\n\nquery getPosts($search: String!) {\n  getPosts(search: $search) {\n    id\n    title\n    text\n    image\n    tag\n    minutesToRead\n    userId\n    user {\n      name\n      email\n    }\n    createdAt\n  }\n}"): (typeof documents)["mutation createPost($title: String!, $text: String!, $image: String!, $tag: String!, $minutesToRead: String!) {\n  createPosts(\n    createPostDto: {title: $title, text: $text, image: $image, tag: $tag, minutesToRead: $minutesToRead}\n  ) {\n    response {\n      message\n      error\n      status\n    }\n    post {\n      id\n      title\n      text\n    }\n  }\n}\n\nquery myPosts($skip: Int!, $take: Int!) {\n  myPosts(paginationInput: {skip: $skip, take: $take}) {\n    total\n    items {\n      id\n      title\n      text\n      image\n      tag\n      minutesToRead\n      userId\n      createdAt\n      user {\n        name\n        email\n      }\n      comments {\n        id\n        text\n        userId\n        postsId\n        parentId\n        replyCount\n        user {\n          name\n          email\n        }\n        createdAt\n      }\n      user {\n        name\n        email\n      }\n    }\n  }\n}\n\nmutation createComment($text: String!, $postId: Float!, $parentId: Float) {\n  createComment(\n    createCommentDto: {text: $text, postId: $postId, parentId: $parentId}\n  ) {\n    id\n    text\n    userId\n    postsId\n    parentId\n    replyCount\n  }\n}\n\nquery myPosts($skip: Int!, $take: Int!) {\n  myPosts(paginationInput: {skip: $skip, take: $take}) {\n    total\n    items {\n      id\n      title\n      text\n      image\n      tag\n      minutesToRead\n      userId\n      createdAt\n      user {\n        name\n        email\n      }\n      comments {\n        id\n        text\n        userId\n        postsId\n        parentId\n        replyCount\n        user {\n          name\n          email\n        }\n        createdAt\n      }\n      user {\n        name\n        email\n      }\n    }\n  }\n}\n\nquery findPostById($id: Float!) {\n  findPostById(id: $id) {\n    response {\n      message\n      error\n      status\n    }\n    post {\n      id\n      title\n      text\n      image\n      tag\n      minutesToRead\n      userId\n      createdAt\n      user {\n        name\n        email\n      }\n      comments {\n        id\n        text\n        userId\n        postsId\n        parentId\n        replyCount\n        user {\n          name\n          email\n        }\n        createdAt\n      }\n    }\n  }\n}\n\nquery replies($commentId: Float!) {\n  replies(commentId: $commentId) {\n    id\n    text\n    userId\n    postsId\n    parentId\n    replyCount\n    user {\n      name\n      email\n    }\n    createdAt\n  }\n}\n\nquery getPosts($search: String!) {\n  getPosts(search: $search) {\n    id\n    title\n    text\n    image\n    tag\n    minutesToRead\n    userId\n    user {\n      name\n      email\n    }\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation signUp($name: String!, $email: String!, $password: String!) {\n  signUp(\n    createUserInput: {name: $name, email: $email, password: $password, role: Admin}\n  ) {\n    name\n    email\n    password\n  }\n}\n\nmutation signIn($email: String!, $password: String!) {\n  signIn(user: {email: $email, password: $password}) {\n    accesstoken\n    response {\n      status\n      message\n    }\n  }\n}"): (typeof documents)["mutation signUp($name: String!, $email: String!, $password: String!) {\n  signUp(\n    createUserInput: {name: $name, email: $email, password: $password, role: Admin}\n  ) {\n    name\n    email\n    password\n  }\n}\n\nmutation signIn($email: String!, $password: String!) {\n  signIn(user: {email: $email, password: $password}) {\n    accesstoken\n    response {\n      status\n      message\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;